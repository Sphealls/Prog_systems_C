//1.Даны две переменные. Поменяйте значения переменных друг с другом двумя способами

#include <stdio.h>
#include <math.h>

int main() {

    int a, b;
    printf("Первоначальные данные:");
    scanf("%d%d", &a, &b);
    a = a * b; 
    b = a / b;  
    a = a / b;
    
    printf("Данные после программы: %d, %d", a, b);

    return 0;
 }


//2.Дано два числа a и b. Найдите гипотенузу треугольника с заданными катетами.

#include <stdio.h>
#include <math.h>


int main() {
double a, b, c;

    printf("Введите два катета а и b: ");
    scanf("%lf%lf", &a, &b);

    c = sqrt(a*a + b*b);

    printf("Гипотенуза равна: %lf",c);

    return 0;
}

//3.Дано натуральное число. Выведите его последнюю цифру.

#include <stdio.h>
#include <math.h>


int main() {

    int a;
    printf("Введите натуральное число: ");
    scanf("%d", &a);

    printf("Выведите его последнюю цифру: %d", a%10);

    return 0;
}


//4.Дано неотрицательное целое число. Найдите число десятков в его десятичной записи (то есть вторую справа цифру его десятичной записи).

#include <stdio.h>
#include <math.h>


int main() {

int number, n_tens;

    printf("Введите неотрицательное целое число: ");
    scanf("%d", &number);

    if (number >= 10) {
        n_tens = (number / 10) % 10;} else {n_tens = 0;}

    printf("Число десятков: %d", n_tens);


   return 0;
}

//5.Дано двузначное число. Найдите число десятков в нем.

#include <stdio.h>
#include <math.h>

int main() {

int number;
    printf("Введите двузначное число: ");
    scanf("%d", &number);

    printf("Число десятков: %d", abs(number)/10);
    return 0;

}


//6. Вводится две целочисленные переменные и возвращает их среднее арифметическое

#include <stdio.h>

int main() {
    int number_1, number_2;
    float arif_mean;

    printf("Введите первое число: ");
    scanf("%d", &number_1);

    printf("Введите второе число: ");
    scanf("%d", &number_2);

    arif_mean = (number_1 + number_2) / 2.0;

    printf("Среднее арифметическое: %.2f\n", arif_mean);

    return 0;
}


//7.Вводится две целочисленные переменные и возвращает их среднее геометрическое

#include <stdio.h>//вкл использования ввода и вывода
#include <math.h>//вкл использования математических ф-ий

int main() {// точка входа в программу
    int number_1, number_2;//объявление двух целочисленных переменных
    double geometric_mean;//объявление переменной для геом ср типа дабл для представления числа с плавающей токой двойной точности и большей памяти(дробные напрм)

    printf("Введите первое число: ");
    scanf("%d", &number_1);//ожидается ввод с клавиатуры целого числа формата %d и сохраняет его в переменую с путем намбер1

    printf("Введите второе число: ");
    scanf("%d", &number_2);

    geometric_mean = sqrt(number_1 * number_2);//находим среднее геометриеское

    printf("Среднее геометрическое: %.4f\n", geometric_mean);//выводит среднее геометрическое с 4 знаками после запятой

    return 0;//завершение программы
}



//8. Вводится 4 числа с плавающей точкой. Первые два числа – координаты x, y первой точки. Вторые два числа – координаты x,y второй точки. Найти расстояние между двумя точками


#include <stdio.h>
#include <math.h>

int main() {
    float x1, y1, x2, y2;
    float dist_way;

    printf("Введите координаты первой точки (x1, y1): ");
    scanf("%f %f", &x1, &y1);

    printf("Введите координаты второй точки (x2, y2): ");
    scanf("%f %f", &x2, &y2);

    dist_way = sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));

    printf("Расстояние между двумя точками: %.2f\n", dist_way);

    return 0;
}

//9.Вводятся три разных числа. Найти, какое из них является средним (больше одного, но меньше другого).


#include <stdio.h>

int main() {
    float number_1, number_2, number_3;
    float mean_number;

    printf("Введите три разных числа: ");
    scanf("%f %f %f", &number_1, &number_2, &number_3);

    if ((number_1 > number_2 && number_1 < number_3) || (number_1 < number_2 && number_1 > number_3)) {
        mean_number = number_1;
    } else if ((number_2 > number_1 && number_2 < number_3) || (number_2 < number_1 && number_2 > number_3)) {
        mean_number = number_2;
    } else {
        mean_number = number_3;
    }

    printf("Среднее число: %.2f\n", mean_number);

    return 0;
}

/*10. Найти корни квадратного уравнения и вывести их на экран, если они есть. Если корней нет, то вывести сообщение об этом. 
Конкретное квадратное уравнение определяется коэффициентами a, b, c, которые вводит пользователь.*/

#include <stdio.h>
#include <math.h>

int main() {
    float a, b, c;
    float discriminant, root_equation_1, root_equation_2;

    printf("Введите коэффициенты квадратного уравнения (a, b, c): ");
    scanf("%f %f %f", &a, &b, &c);

    discriminant = b * b - 4 * a * c;

    if (discriminant > 0) {
        root_equation_1 = (-b + sqrt(discriminant)) / (2 * a);
        root_equation_2 = (-b - sqrt(discriminant)) / (2 * a);
        printf("Корни квадратного уравнения: %.2f и %.2f\n", root_equation_1, root_equation_2);
    } else if (discriminant == 0) {
        root_equation_1 = -b / (2 * a);
        printf("Корень квадратного уравнения: %.2f\n", root_equation_1);
    } else {
        printf("Квадратное уравнение не имеет действительных корней.\n");
    }

    return 0;
}

/* Введите коэффициенты квадратного �равнения (a, b, c): 1 4 3
Корни квадратног� уравнения: -1.00 и -3.00*/
//11. Вводятся три целых числа. Определить какое из них наибольшее.


#include <stdio.h>

int main() {
    int number_1, number_2, number_3;
    int max_number;

    printf("Введите три целых числа: ");
    scanf("%d %d %d", &number_1, &number_2, &number_3);

    max_number = number_1;

    if (number_2 > max_number) {
        max_number = number_2;
    }

    if (number_3 > max_number) {
        max_number = number_3;
    }

    printf("Наибольшее число: %d\n", max_number);

    return 0;
}


/*12. По длинам трех отрезков, введенных пользователем, определить возможность существования треугольника, составленного из этих отрезков.
Если такой треугольник существует, то определить, является ли он разносторонним, равнобедренным или равносторонним.*/

#include <stdio.h>

int main() {
    float a, b, c;

    printf("Введите длины трех отрезков: ");
    scanf("%f %f %f", &a, &b, &c);

    if (a + b > c && b + c > a && a + c > b) {
        if (a == b && b == c) {
            printf("Треугольник является равносторонним.\n");
        } else if (a == b || b == c || a == c) {
            printf("Треугольник является равнобедренным.\n");
        } else {
            printf("Треугольник является разносторонним.\n");
        }
    } else {
        printf("Треугольник с такими сторонами не существует.\n");
    }

    return 0;
}


/*13.	Определить четверть координатной плоскости, которой принадлежит точка. Координаты точки ввести с клавиатуры.*/
#include <stdio.h>

int main() {
    int x, y;
	scanf("%d %d", &x, &y);
	if (x == 0 && y == 0){
	    printf("Точка является началом координат");
	}else if(x == 0 || y == 0){
	    printf("Точка лежит на одной из осей");
	}else if(x > 0 && y > 0){
	    printf("Точка лежит в первой четверти");
	}else if(x < 0 && y > 0){
	    printf("Точка лежит во второй четверти");
	}else if(x < 0 && y < 0){
	    printf("Точка лежит в третьей четверти");
	}else{
	    printf("Точка лежит в четвертой четверти");
	}
}


/*14.	С помощью цикла while ассчитать двойной факториал для произвольного числа. 
Двойной факториал n!! числа n рассчитывается как произведение всех чисел, меньших исходного на числа, кратные двум 
(вплоть до 1 или 2). Например: 7!! = 7 * 5 * 3 * 1 = 105*/
#include <stdio.h>

int main() {
    int n, factorial = 1;
	scanf("%d", &n);
	while(n >= 2){
	    factorial = factorial * n;
	    n -= 2;
	}
	printf("Двойной факториал  = %d", factorial);
}


/*15.	Решить предыдущую задачу с помощью цикла for.*/
#include <stdio.h>

int main() {
    int n, factorial = 1;
	scanf("%d", &n);
	for(int i=n; i >= 2; i=i-2){
	    factorial = factorial * i;
	}
	printf("Двойной факториал  = %d", factorial);
}


/*16.	Вывести все простые числа в произвольном интервале [a, b].*/

#include <stdio.h>

int main() {
    int a, b, c, sum;
    scanf("%d %d", &a, &b);
    
    if (b > a){
        c = a;
        a = b;
        b = c;
    }else if( a == b){
        printf("Ошибка: значение конца и начала отрезка совпадают");
    }
    for(int i = a; i <= b; i++){
        sum = 0;
        for(int j = 1; j <= i; i++){
            if(i%j == 0){
                  sum += 1;
            }
        if(sum == 2){
            printf("%d", i);
        }
        }
    }
}


/*17.	На вход программы поступает последовательность целых чисел. Количество чисел в последовательности заранее неизвестно. 
Но известно, что в конце последовательности записано число -9999 и в последовательности всегда есть хотя бы одно число, кроме -9999. 
Вывести все элементы последовательности, кроме заключительного -9999, на экран. 
Вывести сумму всех элементов последовательности.*/
#include <stdio.h>

int main() {
    int number, summa;
    printf("Введите первое число последовательности \n");
    scanf("%d", &number);
    while(number != -9999){
        summa += number;
        printf("%d \n", number);
        printf("Введите следующее число последовательности \n");
        scanf("%d", &number);
    }
    summa += -9999;
    printf("Сумма чисел последовательности: %d", summa);
}


/*18.	Последовательность целых чисел, оканчивающаяся нулём. 
Само число нуль не является членом последовательности, а является лишь сигналом того, что достигнут конец последовательности. 
В последовательности есть как минимум одно ненулевое число. 
Вывести максимальное и минимальное значения*/
#include <stdio.h>

int main() {
    int min, max, number;
    printf("Введите первое число последовательности \n");
    scanf("%d", &number);
    min = number;
    max = number;
    while(number != 0){
        if(number > max){
            max = number;
            printf("Введите следующее число последовательности \n");
            scanf("%d", &number);
        } else if(number < min){
            min = number;
            printf("Введите следующее число последовательности \n");
            scanf("%d", &number);
        } else{
        printf("Введите следующее число последовательности \n");
        scanf("%d", &number);
        }
    }
    printf("Минимальное число в последовательности: %d \n", min);
    printf("Максимальное число в последовательности: %d \n", max);
}

/*19.	Выведите на экран все точные квадраты натуральных чисел, не превосходящие данного числа N. 
Выводить квадраты следует от меньшего к большему.*/

#include <stdio.h>
#include <math.h>

void printPerfectSquares(int N) {
    int i;
    for(i = 1; i*i <= N; ++i) {
        int square = i * i;
        printf("%d ", square);
    }
}

int main() {
    int N;
    printf("Введите число N: ");
    scanf("%d", &N);

    printf("Точные квадраты натуральных чисел, не превосходящие %d:\n", N);
    printPerfectSquares(N);

    printf("\n");

    return 0;
}


/*20.	По данном числу N определить, является ли оно степенью числа 22.*/
#include <stdio.h>

int Power22(int N) {
    while (N % 22 == 0) {
        N /= 22;
    }

    if (N == 1) {
        return 1;  // Число N является степенью числа 22
    } else {
        return 0;  // Число N не является степенью числа 22
    }
}

int main() {
    int N;
    printf("Введите число N: ");
    scanf("%d", &N);

    if (Power22(N)) {
        printf("%d является степенью числа 22\n", N);
    } else {
        printf("%d не является степенью числа 22\n", N);
    }

    return 0;
}


/*21.	Напишите программу, которая по данному натуральному N печатает его цифры в обратном порядке.*/
#include <stdio.h>

void ReverseDigits(int N) {
    if (N == 0) {
        printf("0"); // Если число N равно 0, печатаем только 0
        return;
    }

    while (N > 0) {
        int digit = N % 10; // Получаем последнюю цифру числа N
        printf("%d ", digit);
        N /= 10; // Удаляем последнюю цифру числа N
    }
}

int main() {
    int N;
    printf("Введите натуральное число N: ");
    scanf("%d", &N);

    printf("Цифры числа %d в обратном порядке: ", N);
    ReverseDigits(N);

    printf("\n");

    return 0;
}

/*22.	Вводится два положительных целых числа. Найти НОД.*/
#include <stdio.h>

// Функция для вычисления НОД по алгоритму Евклида
int gcd(int a, int b) {
    if (b == 0) {
        return a; // Если второе число равно 0, то НОД равен первому числу
    } else {
        return gcd(b, a % b); // Рекурсивный вызов функции с новыми аргументами
    }
}

int main() {
    int a, b;
    printf("Введите два положительных целых числа: ");
    scanf("%d %d", &a, &b);

    if (a <= 0 || b <= 0) {
        printf("Ошибка: числа должны быть положительными\n");
        return 1; // В случае неправильного ввода, завершаем программу с ошибкой
    }

    int result = gcd(a, b);

    printf("Наибольший общий делитель (НОД) чисел %d и %d: %d\n", a, b, result);

    return 0;
}



/*23.	Написать программу, позволяющую получить словесное описание школьных отметок
(1 — «плохо», 2 — «неудовлетворительно», 3 — «удовлетворительно», 4 — «хорошо», 5 — «отлично»).*/
#include <stdio.h>

void Grade(int grade) {
    switch (grade) {
        case 1:
            printf("Плохо\n");
            break;
        case 2:
            printf("Неудовлетворительно\n");
            break;
        case 3:
            printf("Удовлетворительно\n");
            break;
        case 4:
            printf("Хорошо\n");
            break;
        case 5:
            printf("Отлично\n");
            break;
        default:
            printf("Некорректная оценка\n");
    }
}

int main() {
    int grade;
    printf("Введите школьную оценку: ");
    scanf("%d", &grade);

    Grade(grade);

    return 0;
}



/*24.	Вводятся 3 числа, описывающие вектор в трехмерном пространстве. Найти:
1.	Длину вектора
2.	Скалярное произведение
3.	Вводить информацию о двух векторах
4.	Векторное произведение между векторами
5.	Методы для суммы и разности
*/
#include <stdio.h>
#include <math.h>

struct Vector {
    float x;
    float y;
    float z;
};

float vectorLength(struct Vector v) {
    return sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
}

float scalarProduct(struct Vector v1, struct Vector v2) {
    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
}

struct Vector vectorProduct(struct Vector v1, struct Vector v2) {
    struct Vector result;
    result.x = v1.y * v2.z - v1.z * v2.y;
    result.y = v1.z * v2.x - v1.x * v2.z;
    result.z = v1.x * v2.y - v1.y * v2.x;
    return result;
}

struct Vector addVectors(struct Vector v1, struct Vector v2) {
    struct Vector result;
    result.x = v1.x + v2.x;
    result.y = v1.y + v2.y;
    result.z = v1.z + v2.z;
    return result;
}

struct Vector subtractVectors(struct Vector v1, struct Vector v2) {
    struct Vector result;
    result.x = v1.x - v2.x;
    result.y = v1.y - v2.y;
    result.z = v1.z - v2.z;
    return result;
}

int main() {
    struct Vector v1, v2;
    
    printf("Введите координаты первого вектора (x, y, z): ");
    scanf("%f %f %f", &v1.x, &v1.y, &v1.z);
    
    printf("Введите координаты второго вектора (x, y, z): ");
    scanf("%f %f %f", &v2.x, &v2.y, &v2.z);
    
    printf("Длина первого вектора: %.2f\n", vectorLength(v1));
    printf("Длина второго вектора: %.2f\n", vectorLength(v2));
    
    printf("Скалярное произведение векторов: %.2f\n", scalarProduct(v1, v2));
    
    struct Vector vectorProd = vectorProduct(v1, v2);
    printf("Векторное произведение векторов: %.2f %.2f %.2f\n", vectorProd.x, vectorProd.y, vectorProd.z);
    
    struct Vector sum = addVectors(v1, v2);
    struct Vector diff = subtractVectors(v1, v2);
    
    printf("Сумма векторов: %.2f %.2f %.2f\n", sum.x, sum.y, sum.z);
    printf("Разность векторов: %.2f %.2f %.2f\n", diff.x, diff.y, diff.z);
    
    return 0;
}
